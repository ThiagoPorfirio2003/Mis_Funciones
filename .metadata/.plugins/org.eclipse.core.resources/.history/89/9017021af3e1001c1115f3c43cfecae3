/*
 * findDato.c
 *
 *  Created on: 1 jun. 2022
 *      Author: thiag
 */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "utn.h"

//INT
int find_GuardarMayorInt(int* direccionNumeroMayor, int numeroRecibido, int* direccionBanderaNumeroMaximo)
{
	int retorno;

	retorno=1;

	if(direccionNumeroMayor != NULL && direccionBanderaNumeroMaximo !=NULL)
	{
		retorno =0;
		if(*direccionBanderaNumeroMaximo || *direccionNumeroMayor<numeroRecibido)
		{
			*direccionNumeroMayor=numeroRecibido;
			*direccionBanderaNumeroMaximo=0;
		}
	}
	return retorno;
}

int find_GuardarMenorInt(int* direccionNumeroMenor, int numeroRecibido, int* direccionBanderaNumeroMenor)
{
	int retorno;

	retorno=1;

	if(direccionNumeroMenor != NULL && direccionBanderaNumeroMenor !=NULL)
	{
		retorno =0;
		if(*direccionBanderaNumeroMenor || *direccionNumeroMenor>numeroRecibido)
		{
			*direccionNumeroMenor=numeroRecibido;
			*direccionBanderaNumeroMenor=0;
		}
	}
	return retorno;
}

int find_BuscarMayorInt(int* direccionNumeroMayor, int* direccionBanderaNumeroMaximo, int cantidadNumeros, int* direccionPrimerNumero)
{
	int retorno;
	int bufferNumeroMayor;
	retorno =1;

	if(direccionNumeroMayor != NULL && direccionBanderaNumeroMaximo != NULL && direccionPrimerNumero !=NULL && cantidadNumeros > 0)
	{
		for(int i=0;i<cantidadNumeros;i++)
		{
			if(find_GuardarMayorInt(&bufferNumeroMayor, *(direccionPrimerNumero+i), direccionBanderaNumeroMaximo))
			{
				break;
			}
		}
		retorno=0;
		*direccionNumeroMayor = bufferNumeroMayor;
	}
	return retorno;
}

int find_BuscarMenorInt(int* direccionNumeroMenor, int* direccionBanderaNumeroMenor, int cantidadNumeros, int* direccionPrimerNumero)
{
	int retorno;
	int bufferNumeroMenor;
	retorno =1;

	if(direccionNumeroMenor != NULL && direccionBanderaNumeroMenor != NULL && direccionPrimerNumero !=NULL && cantidadNumeros > 0)
	{
		for(int i=0;i<cantidadNumeros;i++)
		{
			if(find_GuardarMenorInt(&bufferNumeroMenor, *(direccionPrimerNumero+i), direccionBanderaNumeroMenor))
			{
				break;
			}
		}
		retorno=0;
		*direccionNumeroMenor = bufferNumeroMenor;
	}
	return retorno;
}

//FLOAT
int find_GuardarMayorFloat(float* direccionNumeroMayor, float numeroRecibido, int* direccionBanderaNumeroMaximo)
{
	int retorno;

	retorno=1;

	if(direccionNumeroMayor != NULL && direccionBanderaNumeroMaximo !=NULL)
	{
		retorno =0;
		if(*direccionBanderaNumeroMaximo || *direccionNumeroMayor<numeroRecibido)
		{
			*direccionNumeroMayor=numeroRecibido;
			*direccionBanderaNumeroMaximo=0;
		}
	}
	return retorno;
}

int find_GuardarMenorFloat(float* direccionNumeroMenor, float numeroRecibido, int* direccionBanderaNumeroMenor)
{
	int retorno;

	retorno=1;

	if(direccionNumeroMenor != NULL && direccionBanderaNumeroMenor !=NULL)
	{
		retorno =0;
		if(*direccionBanderaNumeroMenor || *direccionNumeroMenor>numeroRecibido)
		{
			*direccionNumeroMenor=numeroRecibido;
			*direccionBanderaNumeroMenor=0;
		}
	}
	return retorno;
}

int find_BuscarMayorFloat(float* direccionNumeroMayor, int* direccionBanderaNumeroMaximo, int cantidadNumeros, int* direccionPrimerNumero)
{
	int retorno;
	float bufferNumeroMayor;
	retorno =1;

	if(direccionNumeroMayor != NULL && direccionBanderaNumeroMaximo != NULL && direccionPrimerNumero !=NULL && cantidadNumeros > 0)
	{
		for(int i=0;i<cantidadNumeros;i++)
		{
			if(find_GuardarMayorFloat(&bufferNumeroMayor, *(direccionPrimerNumero+i), direccionBanderaNumeroMaximo))
			{
				break;
			}
		}
		retorno=0;
		*direccionNumeroMayor = bufferNumeroMayor;
	}
	return retorno;
}

int find_BuscarMenorFloat(float* direccionNumeroMenor, int* direccionBanderaNumeroMenor, int cantidadNumeros, int* direccionPrimerNumero)
{
	int retorno;
	float bufferNumeroMenor;
	retorno =1;

	if(direccionNumeroMenor != NULL && direccionBanderaNumeroMenor != NULL && direccionPrimerNumero !=NULL && cantidadNumeros > 0)
	{
		for(int i=0;i<cantidadNumeros;i++)
		{
			if(find_GuardarMenorFloat(&bufferNumeroMenor, *(direccionPrimerNumero+i), direccionBanderaNumeroMenor))
			{
				break;
			}
		}
		retorno=0;
		*direccionNumeroMenor = bufferNumeroMenor;
	}
	return retorno;
}


int getMenorOMayorInt(int* numeroMayorMenor, int numeroRecibido, int* banderaMayorMenor, int (*funcionMayorMenor)(int*,int,int*))
{
	int retorno;

	retorno=1;

	if(numeroMayorMenor!=NULL && banderaMayorMenor!=NULL && *funcionMayorMenor != NULL)
	{
		if(!(funcionMayorMenor(numeroMayorMenor, numeroRecibido, banderaMayorMenor)))
		{
			retorno=0;
		}
	}
	return retorno;
}
/*
int findNumeroMedio(int* cadenaInt, int tamanioCadena,int opcionNumeroIgual)
{
	int retorno;

	retorno=1;

	if(cadenaInt !=NULL && tamanioCadena > 0)
	{
	//	= tamanioCadena/2;
	}

	return retorno;
}

int pedirYConseguirMayorNumero(int* numeroMayor, int cantidadDeNumeros, char* mensaje, char* mensajeError, int minimo, int maximo)
{
	int retorno;
	int numeroAIngresar;
	int banderaNumeroMaximo;

	banderaNumeroMaximo=1;
	retorno=1;

	if(numeroMayor !=NULL && mensaje !=NULL && mensajeError !=NULL && cantidadDeNumeros >0)
	{
		for(int i;i<cantidadDeNumeros;i++)
		{
			if(!(utn_getIntRango(&numeroAIngresar, mensaje, mensajeError, minimo, maximo)))
			{
				if(recibirYConseguirMayorNumero(&numeroMayor, numeroAIngresar, &banderaNumeroMaximo))
				{
					break;
				} //
			}
		}
		retorno =0;
	}
	return retorno;
}
*/
